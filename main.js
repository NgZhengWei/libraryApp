/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("let library;\n\nconst Logic = (function () {\n  function bookFactory(title, author, pages, status) {\n    return {\n      title,\n      author,\n      pages,\n      status,\n      changeReadStatus() {\n        this.status = !this.status;\n      },\n    };\n  }\n\n  function addBookToLibrary(title, author, pages, status) {\n    // creates a book and adds it to library array\n    library.push(bookFactory(title, author, pages, status));\n    Save.saveLibraryToLocalStorage(library);\n  }\n\n  // click event handler to delete book in question\n  function deleteBook(e) {\n    const parentIndex =\n      e.target.parentElement.parentElement.attributes[0].value;\n    if (\n      !confirm(`Are you sure you want to delete ${library[parentIndex].title}?`)\n    )\n      return; // prompt for confirmation incase of accidental deletion\n    library.splice(parentIndex, 1);\n    Interface.displayBooks(library);\n    Save.saveLibraryToLocalStorage(library);\n  }\n\n  // click eventlistener to change status of book in library and also the display\n  function callChangeStatus(e) {\n    const parentIndex =\n      e.target.parentElement.parentElement.attributes[0].value;\n    library[parentIndex].changeReadStatus();\n    if (e.target.innerText === 'Read') {\n      e.target.innerText = 'Not Read';\n    } else {\n      e.target.innerText = 'Read';\n    }\n    Save.saveLibraryToLocalStorage(library);\n  }\n\n  // checks for empty fields before adding a new book to library array and alerts the fields that are empty\n  function hasEmptyFields(title, author, pages, status) {\n    const emptyFields = [];\n    if (title === '') {\n      emptyFields.push('title');\n    }\n    if (author === '') {\n      emptyFields.push('author');\n    }\n    if (pages === '') {\n      emptyFields.push('pages');\n    }\n    // if no errors were pushed into array\n    if (emptyFields.length === 0) {\n      return false;\n    }\n    alert(\n      `Book not added. Following fields not filled: ${emptyFields.join(', ')}`\n    );\n    return true;\n  }\n\n  function newBookFormInput(e) {\n    // takes input from popup form for adding a new book\n    e.preventDefault();\n    // clear previous error messages\n    document.querySelector('.title-error').innerText = '';\n    document.querySelector('.author-error').innerText = '';\n    const form = document.querySelector('#add-book-popup > form');\n    const title = document.querySelector('#add-title');\n    const author = document.querySelector('#add-author');\n    const pages = document.querySelector('#add-pages').value;\n    const status = document.querySelector('#add-status').value === 'read';\n\n    // check if fields for author and title are empty, if so append error message into form\n    let errorFlag = false;\n    if (!title.checkValidity()) {\n      document.querySelector('.title-error').innerText =\n        title.validationMessage;\n      errorFlag = true;\n    }\n    if (!author.checkValidity()) {\n      document.querySelector('.author-error').innerText =\n        author.validationMessage;\n      errorFlag = true;\n    }\n    if (errorFlag) return;\n    // if (hasEmptyFields(title, author, pages, status)) return;\n    Logic.addBookToLibrary(title, author, pages, status);\n\n    document.querySelector('#add-book-popup').classList.toggle('invisible'); // makes form go away after submission\n    Interface.displayBooks(library); // repopulates booklist so new book is displayed\n    form.reset();\n  }\n\n  return {\n    bookFactory,\n    addBookToLibrary,\n    deleteBook,\n    callChangeStatus,\n    newBookFormInput,\n  };\n})();\n\nconst Save = (function () {\n  function storageAvailable(type) {\n    let storage;\n    try {\n      storage = window[type];\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return (\n        e instanceof DOMException &&\n        // everything except Firefox\n        (e.code === 22 ||\n          // Firefox\n          e.code === 1014 ||\n          // test name field too, because code might not be present\n          // everything except Firefox\n          e.name === 'QuotaExceededError' ||\n          // Firefox\n          e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage &&\n        storage.length !== 0\n      );\n    }\n  }\n\n  const saveLibraryToLocalStorage = (libraryArr) => {\n    if (!storageAvailable('localStorage')) {\n      console.log(storageAvailable('localStorage'));\n      return;\n    }\n    localStorage.setObj('library', libraryArr);\n  };\n\n  const readLibraryFromLocalStorage = () => {\n    if (!storageAvailable('localStorage')) {\n      console.log(storageAvailable('localStorage'));\n      return;\n    }\n    if (localStorage.getItem('library')) {\n      const localStorageLibrary = localStorage.getObj('library');\n      library = [];\n      localStorageLibrary.forEach((lib) => {\n        library.push(\n          Logic.bookFactory(lib.title, lib.author, lib.pages, lib.status)\n        );\n      });\n    } else {\n      library = [\n        Logic.bookFactory('Sapiens', 'Yuval Noah Harari', 480, true),\n        Logic.bookFactory('Meditations', 'Marcus Aurelius', 254, false),\n      ];\n    }\n  };\n\n  return {\n    saveLibraryToLocalStorage,\n    readLibraryFromLocalStorage,\n  };\n})();\n\nconst Interface = (function () {\n  // resets content area everytime function is called so that all cases (deletion and addition of books) are handled with 1 general function\n  function displayBooks(library) {\n    const contentArea = document.querySelector('#library');\n    // sets content area to just contain the table heading initially\n    contentArea.innerHTML = `<tr>\n                                  <th>Title</th>\n                                  <th>Author</th>\n                                  <th>Pages</th>\n                                  <th>Status</th>\n                                  <th><button style=\"visibility: hidden;\">delete</button></th>\n                              </tr>`;\n\n    // iterates over books in library array, creates elements for each property and appends them to content area\n    for (let i = 0; i < library.length; i++) {\n      // add to display area\n      const bookRow = document.createElement('tr');\n      bookRow.setAttribute('data-index', i);\n\n      const title = document.createElement('td');\n      title.innerText = `${library[i].title}`;\n      bookRow.appendChild(title);\n\n      const author = document.createElement('td');\n      author.innerText = `${library[i].author}`;\n      bookRow.appendChild(author);\n\n      const pages = document.createElement('td');\n      pages.innerText = `${library[i].pages}`;\n      bookRow.appendChild(pages);\n\n      const status = document.createElement('td');\n      const statusButton = document.createElement('button');\n      statusButton.innerText = `${library[i].status ? 'Read' : 'Not Read'}`;\n      statusButton.addEventListener('click', Logic.callChangeStatus);\n      status.appendChild(statusButton);\n      bookRow.appendChild(status);\n\n      const deleteCell = document.createElement('td');\n      const deleteBtn = document.createElement('button');\n      deleteBtn.innerText = 'Delete';\n      deleteBtn.classList.add('red-bg');\n      deleteBtn.addEventListener('click', Logic.deleteBook);\n      deleteCell.appendChild(deleteBtn);\n      bookRow.appendChild(deleteCell);\n\n      contentArea.appendChild(bookRow);\n    }\n  }\n\n  // event handler function for toggling visibility of add book popup\n  function togglePopupVisibility() {\n    const popup = document.querySelector('#add-book-popup');\n    popup.classList.toggle('invisible');\n  }\n\n  return {\n    displayBooks,\n    togglePopupVisibility,\n  };\n})();\n\n// UTILITIES\nStorage.prototype.setObj = function (key, value) {\n  this.setItem(key, JSON.stringify(value));\n};\nStorage.prototype.getObj = function (key) {\n  return JSON.parse(this.getItem(key));\n};\n\n// initialise app\n(function () {\n  Save.readLibraryFromLocalStorage();\n  Interface.displayBooks(library);\n  // runs function to add new book into library array upon clicking submit button\n  const popupSubmitButton = document.querySelector('#add-submit');\n  popupSubmitButton.addEventListener('click', Logic.newBookFormInput);\n  // toggles popup for adding new book's visibility on click of the plus button on bottom right\n  document\n    .querySelector('#add-book')\n    .addEventListener('click', Interface.togglePopupVisibility);\n  // toggle dropdown for project context display\n  document\n    .querySelector('.project-context-display')\n    .addEventListener('click', () => {\n      document\n        .querySelector('.project-content-dropdown')\n        .classList.toggle('invisible');\n    });\n  // toggle dropdown for project manual\n  document\n    .querySelector('.project-manual-display')\n    .addEventListener('click', () => {\n      document\n        .querySelector('.project-manual-dropdown')\n        .classList.toggle('invisible');\n    });\n})();\n\n\n//# sourceURL=webpack://library-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;